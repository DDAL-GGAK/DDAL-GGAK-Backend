# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

# Repo Action 페이지에 나타날 이름 
name: Java CI with Gradle CI/CD

# Event Trigger
# master branch에 push 또는 pull request가 발생할 경우 동작
# branch 단위 외에도, tag나 cron 식 등을 사용할 수 있음 
# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]
# permissions:
#   contents: read
  
# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v3
#     - name: Set up JDK 11
#       uses: actions/setup-java@v3
#       with:
#         java-version: '11'
#         distribution: 'temurin'
#     - name: init with Gradle
#       uses: gradle/gradle-build-action@v2
#     - run: gradle init
#     - name: Build with Gradle
#       uses: gradle/gradle-build-action@v2
#       with:
#         gradle-version: 7.5.1
#         arguments: build
    
#     - name: Grant execute permission for gradlew
#       run: chmod +x gradle
#     - name: Build with Gradle
#       run : ./gradle clean build --exclude-task test 
      
#     # 전송할 파일을 담을 디렉토리 생성
#     - name: Make Directory for deliver
#       run: mkdir deploy
      
#     # Jar 파일 Copy
#     - name: Copy Jar
#       run: cp ./build/libs/*.jar ./deploy/

#     # 압축파일 형태로 전달
#     - name: Make zip file
#       run: zip -r -qq -j ./springboot-intro-build.zip ./deploy

#     # S3 Bucket으로 copy
#     - name: Deliver to AWS S3
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       run: |
#        	aws s3 cp \
#        	--region ap-northeast-2 \
#        	--acl private \ 
# 	./springboot-intro-build.zip s3://springboot-intro-build/ 

#     - name: Build with Gradle
#       # uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
#       # with:
#         # arguments: build
#       run : ./gradle clean build 
     
#     - name: Grant execute permission for gradlew
#       run: chmod +x gradlew

#     # Build
#     - name: Build with Gradle
#       run: ./gradlew clean build

#     # 전송할 파일을 담을 디렉토리 생성
#     - name: Make Directory for deliver
#       run: mkdir deploy
 

    
# jobs:
#   build:
  
#     # 실행 환경 지정
#     runs-on: ubuntu-latest
    
#     # Task의 sequence를 명시한다.
#     steps:
#     - uses: actions/checkout@v2
    
#     - name: Set up JDK 11
#       uses: actions/setup-java@v1
#       with:
#         distribution: temurin
#         java-version: '11'
#         cache: gradle
#     # (n) Gradlew 권한 설정      
#     - name: Setup Gradle
#       uses: gradle/gradle-build-action@v2
#       with:
#        arguments: build
# #        gradle-executable: /path/to/installed/gradle
#     - name: Grant execute permission for gradlew
#       run: git update-index --chmod=+x gradle
    
#     - name: Build with Gradle
#       run: ./gradle clean build
      
   
# name: Run Gradle on PRs
# on: pull_request
# jobs:
#   gradle:
#     strategy:
#       matrix:
#         os: [ubuntu-latest, macos-latest, windows-latest]
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v3
#     - uses: actions/setup-java@v3
#       with:
#         distribution: temurin
#         java-version: 11
        
#     - name: Setup Gradle
#       uses: gradle/gradle-build-action@v2
    
#     - name: Execute Gradle build
#       run: ./gradlew build




on:
  push:
    branches:
      - main

env:
  S3_BUCKET_NAME: tiltil
  RESOURCE_PATH: ./src/main/resources/application.yaml
  CODE_DEPLOY_APPLICATION_NAME: ddal-ggak-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: ddal-ggak-codedeploy-deployment-group

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
        
        # [1]
      - name: Set yaml file 
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }} 
        env:
          override.value: ${{ secrets.DI_FROM_SECRET }} 
          # override.value: 'from deploy.yaml' <-- 이렇게 사용해도 주입이 된다.

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

        # [2]
      - name: Build with Gradle
        run: ./gradlew build
        shell: bash

        # [3]
      - name: Make zip file
        run: zip -r ./$GITHUB_SHA.zip .
        shell: bash

        # [4]
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ${{ secrets.AWS_REGION }} 

        # [5]
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip

        # [6]
      - name: Code Deploy
        run: | 
          aws deploy create-deployment \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$GITHUB_SHA.zip
	  
